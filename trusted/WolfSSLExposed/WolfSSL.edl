enclave {
//	include "wolfssl/ssl.h"
//    include "wolfssl/wolfcrypt/settings.h"
//    include "wolfssl/wolfcrypt/types.h"

	include "user_types.h"
	
	trusted {

		public WOLFSSL_SSL_IDENTIFIER sgx_SSL_new(WOLFSSL_SSL_CTX_IDENTIFIER id);
		public int sgx_SSL_set_session_id_context(WOLFSSL_SSL_IDENTIFIER ssl, [in, size=len] unsigned char*buffer, size_t len);
		public void sgx_SSL_set_app_data(WOLFSSL_SSL_IDENTIFIER ssl, [user_check]void* arg);
		public void sgx_SSL_set_verify_result(WOLFSSL_SSL_IDENTIFIER sslId, long verify_result);


		int 	sgx_SSL_get_ex_new_index(long argl, [in, size=len]char *argp, size_t len);
		void* 	sgx_SSL_get_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId);
		void 	sgx_SSL_set_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId, [user_check] void* data);

		//BIO
		WOLFSSL_BIO_IDENTIFIER sgx_BIO_new_file([in, string] const char *filename, [in, string] const char *mode);
		WOLFSSL_BIO_IDENTIFIER sgx_BIO_new(WOLFSSL_BIO_METHOD_IDENTIFIER methodId);
		int sgx_BIO_free(WOLFSSL_BIO_IDENTIFIER bioId);
		WOLFSSL_BIO_METHOD_IDENTIFIER sgx_BIO_f_base64();
		

		//PEM
		WOLFSSL_DH_IDENTIFIER 		sgx_PEM_read_bio_DHparams(WOLFSSL_BIO_IDENTIFIER bio);
		WOLFSSL_EVP_PKEY_IDENTIFIER sgx_PEM_read_bio_PrivateKey(WOLFSSL_BIO_IDENTIFIER bio);
		
		//wolfSSL_PEM_read_bio_ECPKParameters
		

		
/*
PEM_read_bio_DHparams
PEM_read_bio_PrivateKey
*/
	};
};