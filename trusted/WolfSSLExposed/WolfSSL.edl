enclave {
//	include "wolfssl/ssl.h"
//    include "wolfssl/wolfcrypt/settings.h"
//    include "wolfssl/wolfcrypt/types.h"

	untrusted{
		int 	do_BIO_meth_write_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [in, size=inl]	const char *in, int inl, 	[user_check]void* callback);
		int 	do_BIO_meth_read_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [out, size=inl]	char *in, 	 	int inl, 	[user_check]void* callback);
		int 	do_BIO_meth_puts_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [in, string]		const char *in,			 	[user_check]void* callback);
		int 	do_BIO_meth_gets_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [out, size=inl]	char *in, 	 	int inl, 	[user_check]void* callback);
		//TODO pass ptr?
		long 	do_BIO_meth_ctrl_cb(	WOLFSSL_BIO_IDENTIFIER bioId, 					int cmd,		long num, 	[user_check]void* callback);
		int 	do_BIO_meth_create_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [user_check]void* callback);
		int 	do_BIO_meth_destroy_cb(	WOLFSSL_BIO_IDENTIFIER bioId, [user_check]void* callback);
		
		long do_BIO_info_cb(WOLFSSL_BIO_IDENTIFIER bioId, int event, [in, string]const char* parg, int iarg, long larg, long return_value, [user_check] void* callback);
	};
	trusted {

		//SSL
		public WOLFSSL_SSL_IDENTIFIER sgx_SSL_new(WOLFSSL_SSL_CTX_IDENTIFIER id);
		public int sgx_SSL_set_session_id_context(WOLFSSL_SSL_IDENTIFIER ssl, [in, size=len] unsigned char*buffer, size_t len);
		public void sgx_SSL_set_verify_result(WOLFSSL_SSL_IDENTIFIER sslId, long verify_result);

		public long 	sgx_SSL_get_shutdown(WOLFSSL_SSL_IDENTIFIER sslId);
		public int 		sgx_SSL_shutdown(WOLFSSL_SSL_IDENTIFIER sslId);

		public int 		sgx_SSL_get_ex_new_index(long argl, [in, size=len]char *argp, size_t len);
		public void* 	sgx_SSL_get_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId);
		public void 	sgx_SSL_set_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId, [user_check] void* data);

		public int sgx_OBJ_txt2nid([in, string]const char *sn);
		public int sgx_OBJ_obj2nid(WOLFSSL_ASN1_OBJECT_IDENTIFIER asn1Object);

		public int sgx_i2d_SSL_SESSION(WOLFSSL_SSL_SESSION_IDENTIFIER session, [out, size=length] unsigned char* buffer, size_t length);
		public WOLFSSL_SSL_SESSION_IDENTIFIER sgx_d2i_SSL_SESSION([out] WOLFSSL_SSL_SESSION_IDENTIFIER* sessionOut, [in, size=length]unsigned char* buffer, size_t length);


		public void sgx_SSL_set_bio(WOLFSSL_SSL_IDENTIFIER ssl, WOLFSSL_BIO_IDENTIFIER readBioId, WOLFSSL_BIO_IDENTIFIER writeBioId);
		public WOLFSSL_BIO_IDENTIFIER sgx_SSL_get_rbio(WOLFSSL_SSL_IDENTIFIER sslId);
		public WOLFSSL_BIO_IDENTIFIER sgx_SSL_get_wbio(WOLFSSL_SSL_IDENTIFIER sslId);

		public int sgx_SSL_read(WOLFSSL_SSL_IDENTIFIER sslId, [out, size=num]unsigned char* buffer, int num);
		public int sgx_SSL_write(WOLFSSL_SSL_IDENTIFIER sslId, [in, size=num]const unsigned char* buffer, int num);
		public int sgx_SSL_get_error(WOLFSSL_SSL_IDENTIFIER sslId, int ret);

		public void sgx_SSL_set_app_data(WOLFSSL_SSL_IDENTIFIER sslId, [user_check]void* data);
		public void* sgx_SSL_get_app_data(WOLFSSL_SSL_IDENTIFIER sslId);

		public long sgx_SSL_total_renegotiations(WOLFSSL_SSL_IDENTIFIER sslId);
		//TODO: FREE X509 from sgx_SSL_get_peer_certificate?
		public void sgx_SSL_free(WOLFSSL_SSL_IDENTIFIER sslId); 

		public int sgx_SSL_is_init_finished(WOLFSSL_SSL_IDENTIFIER sslId);
		public int sgx_SSL_in_connect_init(WOLFSSL_SSL_IDENTIFIER sslId);
		public int sgx_SSL_connect(WOLFSSL_SSL_IDENTIFIER sslId);

		public void sgx_SSL_set_shutdown(WOLFSSL_SSL_IDENTIFIER sslId, int opt);
		public int sgx_SSL_set_tlsext_host_name(WOLFSSL_SSL_IDENTIFIER sslId, [string, in]const char* host_name);

		public int sgx_SSL_accept(WOLFSSL_SSL_IDENTIFIER sslId);
		public long sgx_SSL_get_verify_result(WOLFSSL_SSL_IDENTIFIER sslId);

		public WOLFSSL_X509_IDENTIFIER sgx_SSL_get_peer_certificate(WOLFSSL_SSL_IDENTIFIER sslId);
		public WOLFSSL_X509_IDENTIFIER sgx_SSL_get_certificate(WOLFSSL_SSL_IDENTIFIER sslId);

		public int sgx_SSL_get_version(WOLFSSL_SSL_IDENTIFIER sslId, [out, size=buffer_len]char* version, size_t buffer_len);
		public int sgx_SSL_session_reused(WOLFSSL_SSL_IDENTIFIER sslId);
		
		public int sgx_SSL_get_servername(WOLFSSL_SSL_IDENTIFIER sslId, uint8_t type, [out, size=buffer_len]char* buffer, size_t buffer_len);

		public WOLFSSL_SSL_SESSION_IDENTIFIER sgx_SSL_get_session(WOLFSSL_SSL_SESSION_IDENTIFIER sslId);
		
		public WOLFSSL_STACK_IDENTIFIER sgx_SSL_get_peer_cert_chain(WOLFSSL_SSL_IDENTIFIER sslId);

		public int sgx_SSL_SESSION_get_id(WOLFSSL_SSL_SESSION_IDENTIFIER sessionId,  [out, size=buffer_len]char* buffer, size_t buffer_len);
		public int sgx_SSL_SESSION_get_id_sz(WOLFSSL_SSL_SESSION_IDENTIFIER sessionId);
		
		public int sgx_SSL_CIPHER_get_bits(WOLFSSL_SSL_CIPHER_IDENTIFIER cipherId, [out] int *alg_bits);

		public WOLFSSL_SSL_CIPHER_IDENTIFIER sgx_SSL_get_current_cipher(WOLFSSL_SSL_IDENTIFIER sslId);
		public int sgx_SSL_CIPHER_get_name(WOLFSSL_SSL_CIPHER_IDENTIFIER cipherId, [out, size=length] char* buffer, int length);

		public int sgx_OBJ_nid2ln(int n, [out, size=length] char* buffer, int length);
		//BIO
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_new_file([in, string] const char *filename, [in, string] const char *mode);
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_new(WOLFSSL_BIO_METHOD_IDENTIFIER methodId);
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_push(WOLFSSL_BIO_IDENTIFIER bioId1, WOLFSSL_BIO_IDENTIFIER bioId2);
		public int    sgx_BIO_puts(WOLFSSL_BIO_IDENTIFIER bioId, [string, in]const char *buf);
    	public int sgx_BIO_free_all(WOLFSSL_BIO_IDENTIFIER bioId);
		public WOLFSSL_EVP_PKEY_IDENTIFIER sgx_d2i_PrivateKey_bio(WOLFSSL_BIO_IDENTIFIER bioId);
		
		
		public void sgx_BIO_set_retry_read(WOLFSSL_BIO_IDENTIFIER bioId);
		public void sgx_BIO_set_retry_write(WOLFSSL_BIO_IDENTIFIER bioId);

		public int sgx_BIO_free(WOLFSSL_BIO_IDENTIFIER bioId);
		public void sgx_BIO_meth_free(WOLFSSL_BIO_METHOD_IDENTIFIER biomId);

		public WOLFSSL_BIO_METHOD_IDENTIFIER sgx_BIO_f_base64();
		public WOLFSSL_BIO_METHOD_IDENTIFIER sgx_BIO_s_mem();

		public WOLFSSL_BIO_METHOD_IDENTIFIER sgx_SSL_BIO_meth_new(int type, [string, in] const char *name);

			//NOTE: These do nothing in WolfSSL
		public void sgx_BIO_set_shutdown(WOLFSSL_BIO_IDENTIFIER bioId, int shut);
		public long	sgx_BIO_get_shutdown(WOLFSSL_BIO_IDENTIFIER bioId);
		public void sgx_BIO_set_init(WOLFSSL_BIO_IDENTIFIER bioId, int i);

		public void sgx_BIO_clear_retry_flags(WOLFSSL_BIO_IDENTIFIER bioId);

			//This value will only be stored and not actually used inside sgx so we can skip verification steps
		public void sgx_BIO_set_data(WOLFSSL_BIO_IDENTIFIER bioId, [user_check] void* ptr);
		public void* sgx_BIO_get_data(WOLFSSL_BIO_IDENTIFIER bioId);

		public int sgx_BIO_get_mem_ptr(WOLFSSL_BIO_IDENTIFIER bioId, [out, size=buffer_len]uint8_t* buffer, unsigned int buffer_len);

		public int sgx_PEM_write_bio_X509(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_X509_IDENTIFIER x509id);

			//Implement callbacks
		public int sgx_BIO_meth_set_write(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_read(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_puts(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_gets(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_ctrl(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_create(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);
		public int sgx_BIO_meth_set_destroy(WOLFSSL_BIO_METHOD_IDENTIFIER biomId, [user_check]void* callback);

		public void sgx_BIO_set_callback(WOLFSSL_BIO_IDENTIFIER bioId, [user_check]void* callback);
		public void sgx_BIO_set_callback_arg(WOLFSSL_BIO_IDENTIFIER bioId, [user_check]void* data);
		public void* sgx_BIO_get_callback_arg(WOLFSSL_BIO_IDENTIFIER bioId);

		public long sgx_BIO_set_nbio(WOLFSSL_BIO_IDENTIFIER bioId, long on);


		public int sgx_BIO_flush(WOLFSSL_BIO_IDENTIFIER bioId);
		public int sgx_BIO_pending(WOLFSSL_BIO_IDENTIFIER bioId);

		public int sgx_BIO_read(WOLFSSL_BIO_IDENTIFIER bioId, [out, size=len] void* buffer, size_t len);
		public void sgx_BIO_vfree(WOLFSSL_BIO_IDENTIFIER bioId);
		

		//PEM
		public WOLFSSL_DH_IDENTIFIER 		sgx_PEM_read_bio_DHparams(WOLFSSL_BIO_IDENTIFIER bio);
		public WOLFSSL_EVP_PKEY_IDENTIFIER sgx_PEM_read_bio_PrivateKey(WOLFSSL_BIO_IDENTIFIER bio);

		//EVP
		public void sgx_EVP_PKEY_free(WOLFSSL_EVP_PKEY_IDENTIFIER keyId);
		public int sgx_i2d_PrivateKey(WOLFSSL_EVP_PKEY_IDENTIFIER keyId, [out, count=count] unsigned char* der, size_t count);
		public WOLFSSL_EVP_MD_IDENTIFIER sgx_EVP_get_digestbynid(int nid);
		public WOLFSSL_EVP_MD_IDENTIFIER sgx_EVP_md5();
		public WOLFSSL_EVP_MD_IDENTIFIER sgx_EVP_sha1();
		public WOLFSSL_EVP_MD_IDENTIFIER sgx_EVP_sha256();

		//BASIC_CONSTAINTS
		public void sgx_BASIC_CONSTRAINTS_free(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);
		public int sgx_BASIC_CONSTRAINTS_get_ca(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);
		public WOLFSSL_ASN1_INTEGER_IDENTIFIER sgx_BASIC_CONSTRAINTS_get_pathlen(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);

		
		//ASN1
		public WOLFSSL_BIGNUM_IDENTIFIER sgx_ASN1_INTEGER_to_BN(WOLFSSL_ASN1_INTEGER_IDENTIFIER asn1IntId);
		public int sgx_ASN1_STRING_print_ex(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_ASN1_STRING_IDENTIFIER asn1strId, unsigned long flags);
		public int sgx_ASN1_TYPE_get_type(WOLFSSL_ASN1_TYPE_IDENTIFIER type);
		public WOLFSSL_ASN1_STRING_IDENTIFIER sgx_ASN1_TYPE_get_string(WOLFSSL_ASN1_TYPE_IDENTIFIER type);
		public int sgx_i2a_ASN1_INTEGER(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_ASN1_INTEGER_IDENTIFIER asn1IntId);
		public int sgx_ASN1_TIME_print(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_ASN1_TIME_IDENTIFIER timeId);

		public void sgx_ASN1_OBJECT_free(WOLFSSL_ASN1_OBJECT_IDENTIFIER objId);

		public int sgx_OBJ_cmp(WOLFSSL_ASN1_OBJECT_IDENTIFIER objId1, WOLFSSL_ASN1_OBJECT_IDENTIFIER objId2);
		public WOLFSSL_ASN1_OBJECT_IDENTIFIER sgx_OBJ_txt2obj([in, string]const char* s, int no_name);

		public void sgx_ASN1_STRING_free(WOLFSSL_ASN1_STRING_IDENTIFIER asn1Id);

		//BIG NUMBER
		public void sgx_BN_free(WOLFSSL_BIGNUM_IDENTIFIER bnId);
		public int sgx_BN_to_int(WOLFSSL_BIGNUM_IDENTIFIER bnId, [out] int* result );
		public int sgx_BN_bn2dec(WOLFSSL_BIGNUM_IDENTIFIER bnId, [out, size=length] char* buffer, int length);

		//X509
		public uint64_t sgx_X509_get_ext_d2i(WOLFSSL_X509_IDENTIFIER x509id, int nid);

		public WOLFSSL_ASN1_STRING_IDENTIFIER  		sgx_X509_NAME_ENTRY_get_data(WOLFSSL_X509_NAME_ENTRY_IDENTIFIER nameEntryId);
		public WOLFSSL_X509_NAME_ENTRY_IDENTIFIER 	sgx_X509_NAME_get_entry(WOLFSSL_X509_NAME_IDENTIFIER x509NameId, int loc);
		public WOLFSSL_X509_NAME_IDENTIFIER 		sgx_X509_get_subject_name(WOLFSSL_X509_IDENTIFIER x509id);
		public WOLFSSL_X509_NAME_IDENTIFIER 		sgx_X509_get_issuer_name (WOLFSSL_X509_IDENTIFIER x509id);
		public WOLFSSL_ASN1_INTEGER_IDENTIFIER		sgx_X509_get_serialNumber(WOLFSSL_X509_IDENTIFIER x509id);
		public WOLFSSL_ASN1_TIME_IDENTIFIER			sgx_X509_get_notBefore(WOLFSSL_X509_IDENTIFIER x509id);
		public WOLFSSL_ASN1_TIME_IDENTIFIER			sgx_X509_get_notAfter(WOLFSSL_X509_IDENTIFIER x509id);

		public int sgx_X509_NAME_print_ex(WOLFSSL_BIO_IDENTIFIER bio_id, WOLFSSL_X509_NAME_IDENTIFIER x509_name_id, int indent, unsigned long flags);
		public int sgx_X509_NAME_get_index_by_NID(WOLFSSL_X509_NAME_IDENTIFIER x509NameId, int nid, int pos);

		public void sgx_X509_free(WOLFSSL_X509_IDENTIFIER x509id);
		
		public void sgx_X509_NAME_ENTRY_remove_from_map(WOLFSSL_X509_NAME_ENTRY_IDENTIFIER entryId);
		public int sgx_X509_cmp_current_time(WOLFSSL_ASN1_TIME_IDENTIFIER timeId);

		public void sgx_X509_verify_cert_error_string(long err, [out, size=len]char* output, int len);

		public int sgx_X509_up_ref(WOLFSSL_X509_IDENTIFIER x509);

		public int sgx_X509_NAME_oneline(WOLFSSL_X509_NAME_IDENTIFIER x509Nameid,  [out, size=buffer_len]char* buffer, size_t buffer_len);
	
		public int sgx_X509_get_signature_nid(WOLFSSL_X509_IDENTIFIER x509id);

		public int sgx_X509_digest(WOLFSSL_X509_IDENTIFIER x509id, WOLFSSL_EVP_MD_IDENTIFIER digestId, [out, size=buffer_len]char* buffer, size_t buffer_len);
		
		public int sgx_X509V3_EXT_print(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_X509_EXTENSION_IDENTIFIER extId, unsigned long flag, int indent);
		//TODO FREE
		public WOLFSSL_ASN1_OBJECT_IDENTIFIER sgx_X509_EXTENSION_get_object(WOLFSSL_X509_EXTENSION_IDENTIFIER extId);

		public int sgx_X509_get_ext_count(WOLFSSL_X509_IDENTIFIER x509id);

		public long sgx_X509_get_version(WOLFSSL_X509_IDENTIFIER x509id);
		public WOLFSSL_X509_EXTENSION_IDENTIFIER sgx_X509_get_ext(WOLFSSL_X509_IDENTIFIER x509id, int loc);
		//TODO FREE
		public void sgx_X509_ALGOR_get0([out]WOLFSSL_ASN1_OBJECT_IDENTIFIER* asn1ObjId, [user_check] int *pptype, [user_check] const void**ppval, WOLFSSL_X509_ALGOR_IDENTIFIER algorId);
		//TODO FREE
		public WOLFSSL_X509_ALGOR_IDENTIFIER sgx_X509_get0_tbs_sigalg(WOLFSSL_X509_IDENTIFIER x509id);
		//TODO FREE
		public WOLFSSL_X509_PUBKEY_IDENTIFIER sgx_X509_get_X509_PUBKEY(WOLFSSL_X509_IDENTIFIER x509id);
		public int sgx_X509_PUBKEY_get0_param([out]WOLFSSL_ASN1_OBJECT_IDENTIFIER* asn1ObjId, [user_check]const unsigned char **pk, [user_check]int *ppklen, [user_check]void **pa, WOLFSSL_X509_PUBKEY_IDENTIFIER pubId);
		public int sgx_X509_NAME_entry_count(WOLFSSL_X509_NAME_IDENTIFIER nameId);
		//TODO remove from map
		public WOLFSSL_ASN1_OBJECT_IDENTIFIER sgx_X509_NAME_ENTRY_get_object(WOLFSSL_X509_NAME_ENTRY_IDENTIFIER neId);

		//STACK
		public int sgx_sk_GENERAL_NAME_num(WOLFSSL_STACK_IDENTIFIER skId);
		public WOLFSSL_GENERAL_NAME_IDENTIFIER sgx_sk_GENERAL_NAME_value(WOLFSSL_STACK_IDENTIFIER skId, int index);
		public int sgx_sk_GENERAL_NAME_pop_free(WOLFSSL_STACK_IDENTIFIER skId);
		
		public int sgx_sk_X509_num(WOLFSSL_STACK_IDENTIFIER x509id);
		public WOLFSSL_X509_IDENTIFIER sgx_sk_X509_value(WOLFSSL_STACK_IDENTIFIER x509id, int index);

		//TODO onFREE clean map?
		public WOLFSSL_ASN1_STRING_IDENTIFIER sgx_X509_EXTENSION_get_data(WOLFSSL_X509_EXTENSION_IDENTIFIER extId);

		//GENERAL_NAME
		public int sgx_GENERAL_NAME_get_type(WOLFSSL_GENERAL_NAME_IDENTIFIER gnId);
		public WOLFSSL_ASN1_STRING_IDENTIFIER sgx_GENERAL_NAME_get_ia5(WOLFSSL_GENERAL_NAME_IDENTIFIER gnId);
		public WOLFSSL_ASN1_OBJECT_IDENTIFIER sgx_GENERAL_NAME_get_othername_type_id(WOLFSSL_GENERAL_NAME_IDENTIFIER gnId);
		public WOLFSSL_ASN1_TYPE_IDENTIFIER   sgx_GENERAL_NAME_get_othername_type_value(WOLFSSL_GENERAL_NAME_IDENTIFIER gnId);

		//ERR
		public void sgx_ERR_error_string_n(unsigned long e, [out, size = len] char* buf, unsigned long len);
		public unsigned long sgx_ERR_get_error();
		public void sgx_ERR_clear_error();
		public int sgx_ERR_GET_LIB(unsigned long err);
		public int sgx_ERR_GET_REASON(unsigned long err);
		public unsigned long sgx_ERR_peek_error();
	

		//RAND
		public int sgx_RAND_seed([in, size=len]char* seed, int len);
		public int sgx_RAND_status();
	};
};