enclave {
//	include "wolfssl/ssl.h"
//    include "wolfssl/wolfcrypt/settings.h"
//    include "wolfssl/wolfcrypt/types.h"

	include "user_types.h"
	
	trusted {

		//SSL
		public WOLFSSL_SSL_IDENTIFIER sgx_SSL_new(WOLFSSL_SSL_CTX_IDENTIFIER id);
		public int sgx_SSL_set_session_id_context(WOLFSSL_SSL_IDENTIFIER ssl, [in, size=len] unsigned char*buffer, size_t len);
		public void sgx_SSL_set_app_data(WOLFSSL_SSL_IDENTIFIER ssl, [user_check]void* arg);
		public void sgx_SSL_set_verify_result(WOLFSSL_SSL_IDENTIFIER sslId, long verify_result);

		public int 		sgx_SSL_get_shutdown(WOLFSSL_SSL_IDENTIFIER sslId);
		public int 		sgx_SSL_shutdown(WOLFSSL_SSL_IDENTIFIER sslId);

		public int 		sgx_SSL_get_ex_new_index(long argl, [in, size=len]char *argp, size_t len);
		public void* 	sgx_SSL_get_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId);
		public void 	sgx_SSL_set_ex_data(WOLFSSL_SSL_IDENTIFIER ssl, int appId, [user_check] void* data);

		public WOLFSSL_BIO_IDENTIFIER sgx_SSL_get_wbio(WOLFSSL_SSL_IDENTIFIER ssl);

		//BIO
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_new_file([in, string] const char *filename, [in, string] const char *mode);
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_new(WOLFSSL_BIO_METHOD_IDENTIFIER methodId);
		public WOLFSSL_BIO_IDENTIFIER sgx_BIO_push(WOLFSSL_BIO_IDENTIFIER bioId1, WOLFSSL_BIO_IDENTIFIER bioId2);
    	public int sgx_BIO_free_all(WOLFSSL_BIO_IDENTIFIER bioId);
		public WOLFSSL_EVP_PKEY_IDENTIFIER sgx_d2i_PrivateKey_bio(WOLFSSL_BIO_IDENTIFIER bioId);
		
		
		public int sgx_BIO_free(WOLFSSL_BIO_IDENTIFIER bioId);
		public WOLFSSL_BIO_METHOD_IDENTIFIER sgx_BIO_f_base64();
		public WOLFSSL_BIO_METHOD_IDENTIFIER sgx_BIO_s_mem();

		public int sgx_BIO_flush(WOLFSSL_BIO_IDENTIFIER bioId);
		public int sgx_BIO_pending(WOLFSSL_BIO_IDENTIFIER bioId);

		public int sgx_BIO_read(WOLFSSL_BIO_IDENTIFIER bioId, [out, size=len] void* buffer, size_t len);
		

		//PEM
		public WOLFSSL_DH_IDENTIFIER 		sgx_PEM_read_bio_DHparams(WOLFSSL_BIO_IDENTIFIER bio);
		public WOLFSSL_EVP_PKEY_IDENTIFIER sgx_PEM_read_bio_PrivateKey(WOLFSSL_BIO_IDENTIFIER bio);

		//EVP
		public void sgx_EVP_PKEY_free(WOLFSSL_EVP_PKEY_IDENTIFIER keyId);

		//BASIC_CONSTAINTS
		public void sgx_BASIC_CONSTRAINTS_free(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);
		public int sgx_BASIC_CONSTRAINTS_get_ca(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);
		public WOLFSSL_ASN1_INTEGER_IDENTIFIER sgx_BASIC_CONSTRAINTS_get_pathlen(WOLFSSL_BASIC_CONSTRAINTS_IDENTIFIER bcId);

		
		//ASN1
		public WOLFSSL_BIGNUM_IDENTIFIER sgx_ASN1_INTEGER_to_BN(WOLFSSL_ASN1_INTEGER_IDENTIFIER asn1IntId);
		public int sgx_ASN1_STRING_print_ex(WOLFSSL_BIO_IDENTIFIER bioId, WOLFSSL_ASN1_STRING_IDENTIFIER asn1strId, unsigned long flags);

		//BIG NUMBER
		public void sgx_BN_free(WOLFSSL_BIGNUM_IDENTIFIER bnId);
		public int sgx_BN_to_int(WOLFSSL_BIGNUM_IDENTIFIER bnId, [out] int* result );

		//X590
		public uint64_t sgx_X509_get_ext_d2i(WOLFSSL_X509_IDENTIFIER x509id, int nid);

		public WOLFSSL_ASN1_STRING_IDENTIFIER  sgx_X509_NAME_ENTRY_get_data(WOLFSSL_X509_NAME_ENTRY_IDENTIFIER nameEntryId);
	
	};
};